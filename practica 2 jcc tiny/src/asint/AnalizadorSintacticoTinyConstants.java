/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTinyConstants.java */
package asint;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalizadorSintacticoTinyConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int letra = 1;
  /** RegularExpression Id. */
  int digitoPositivo = 2;
  /** RegularExpression Id. */
  int digito = 3;
  /** RegularExpression Id. */
  int parteEntera = 4;
  /** RegularExpression Id. */
  int parteDecimal = 5;
  /** RegularExpression Id. */
  int DONDE = 8;
  /** RegularExpression Id. */
  int EVALUA = 9;
  /** RegularExpression Id. */
  int IDEN = 10;
  /** RegularExpression Id. */
  int lit_ent = 11;
  /** RegularExpression Id. */
  int lit_real = 12;
  /** RegularExpression Id. */
  int STRING = 13;
  /** RegularExpression Id. */
  int NULL = 14;
  /** RegularExpression Id. */
  int PROC = 15;
  /** RegularExpression Id. */
  int TRUE = 16;
  /** RegularExpression Id. */
  int FALSE = 17;
  /** RegularExpression Id. */
  int IF = 18;
  /** RegularExpression Id. */
  int ELSE = 19;
  /** RegularExpression Id. */
  int WHILE = 20;
  /** RegularExpression Id. */
  int STRUCT = 21;
  /** RegularExpression Id. */
  int NEW = 22;
  /** RegularExpression Id. */
  int DELETE = 23;
  /** RegularExpression Id. */
  int READ = 24;
  /** RegularExpression Id. */
  int WRITE = 25;
  /** RegularExpression Id. */
  int NL = 26;
  /** RegularExpression Id. */
  int TYPE = 27;
  /** RegularExpression Id. */
  int CALL = 28;
  /** RegularExpression Id. */
  int AND = 29;
  /** RegularExpression Id. */
  int NOT = 30;
  /** RegularExpression Id. */
  int OR = 31;
  /** RegularExpression Id. */
  int ENT = 32;
  /** RegularExpression Id. */
  int REAL = 33;
  /** RegularExpression Id. */
  int BOOL = 34;
  /** RegularExpression Id. */
  int cadena = 35;
  /** RegularExpression Id. */
  int lit_exp = 36;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<letra>",
    "<digitoPositivo>",
    "<digito>",
    "<parteEntera>",
    "<parteDecimal>",
    "<token of kind 6>",
    "<token of kind 7>",
    "<DONDE>",
    "<EVALUA>",
    "<IDEN>",
    "<lit_ent>",
    "<lit_real>",
    "<STRING>",
    "<NULL>",
    "<PROC>",
    "<TRUE>",
    "<FALSE>",
    "<IF>",
    "<ELSE>",
    "<WHILE>",
    "<STRUCT>",
    "<NEW>",
    "<DELETE>",
    "<READ>",
    "<WRITE>",
    "<NL>",
    "<TYPE>",
    "<CALL>",
    "<AND>",
    "<NOT>",
    "<OR>",
    "<ENT>",
    "<REAL>",
    "<BOOL>",
    "<cadena>",
    "<lit_exp>",
    "\"{\"",
    "\"}\"",
    "\"&&\"",
    "\";\"",
    "\"[\"",
    "\"]\"",
    "\"^\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"&\"",
    "\"@\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"-\"",
    "\"+\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\".\"",
  };

}
