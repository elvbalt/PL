
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Mar 02 13:59:11 CET 2025
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Mar 02 13:59:11 CET 2025
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\006\005" +
    "\000\002\006\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\004\000\002\042\006\000\002" +
    "\042\003\000\002\043\004\000\002\043\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\013\006\000" +
    "\002\014\003\000\002\015\005\000\002\015\003\000\002" +
    "\012\005\000\002\016\004\000\002\017\007\000\002\022" +
    "\003\000\002\022\002\000\002\021\005\000\002\021\003" +
    "\000\002\020\004\000\002\020\005\000\002\005\003\000" +
    "\002\005\002\000\002\023\005\000\002\023\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\025\004\000\002\026\006\000\002\037\004\000\002" +
    "\037\002\000\002\027\005\000\002\030\004\000\002\031" +
    "\004\000\002\032\003\000\002\033\004\000\002\034\004" +
    "\000\002\035\007\000\002\040\003\000\002\040\002\000" +
    "\002\041\005\000\002\041\003\000\002\036\003\000\002" +
    "\007\003\000\002\046\005\000\002\046\003\000\002\047" +
    "\005\000\002\047\003\000\002\050\005\000\002\050\005" +
    "\000\002\050\003\000\002\051\005\000\002\051\005\000" +
    "\002\051\003\000\002\052\005\000\002\052\003\000\002" +
    "\053\004\000\002\053\003\000\002\054\004\000\002\054" +
    "\003\000\002\055\003\000\002\055\005\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\063\003\000" +
    "\002\063\003\000\002\064\003\000\002\064\004\000\002" +
    "\064\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\004\050\004\001\002\000\052\004\ufffd\005" +
    "\012\020\015\021\022\022\020\023\024\027\014\030\ufffd" +
    "\032\ufffd\033\ufffd\034\ufffd\035\ufffd\041\ufffd\042\ufffd\046" +
    "\010\050\ufffd\051\ufffd\052\021\054\ufffd\066\016\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002\000\004\050\226\001\002\000\006" +
    "\053\ufff9\065\ufff9\001\002\000\010\005\ufff1\044\ufff1\055" +
    "\ufff1\001\002\000\006\053\ufffb\065\ufffb\001\002\000\020" +
    "\005\012\020\015\021\022\022\020\023\024\046\010\066" +
    "\016\001\002\000\010\005\ufff0\044\ufff0\055\ufff0\001\002" +
    "\000\020\005\012\020\015\021\022\022\020\023\024\046" +
    "\010\066\016\001\002\000\010\005\ufff2\044\ufff2\055\ufff2" +
    "\001\002\000\010\005\uffee\044\uffee\055\uffee\001\002\000" +
    "\004\005\207\001\002\000\010\005\uffef\044\uffef\055\uffef" +
    "\001\002\000\006\053\ufffa\065\ufffa\001\002\000\010\005" +
    "\uffed\044\uffed\055\uffed\001\002\000\004\050\004\001\002" +
    "\000\030\004\045\030\055\032\044\033\056\034\050\035" +
    "\071\041\066\042\067\050\004\051\uffde\054\046\001\002" +
    "\000\010\005\ufff3\044\ufff3\055\ufff3\001\002\000\010\005" +
    "\ufff5\044\ufff5\055\ufff5\001\002\000\006\053\ufff8\065\ufff8" +
    "\001\002\000\006\005\040\044\037\001\002\000\006\053" +
    "\035\065\034\001\002\000\030\004\ufffe\030\ufffe\032\ufffe" +
    "\033\ufffe\034\ufffe\035\ufffe\041\ufffe\042\ufffe\050\ufffe\051" +
    "\ufffe\054\ufffe\001\002\000\024\005\012\020\015\021\022" +
    "\022\020\023\024\027\014\046\010\052\021\066\016\001" +
    "\002\000\006\053\ufffc\065\ufffc\001\002\000\004\006\041" +
    "\001\002\000\012\015\ufff7\051\ufff7\053\ufff7\065\ufff7\001" +
    "\002\000\004\045\042\001\002\000\010\005\ufff6\044\ufff6" +
    "\055\ufff6\001\002\000\004\051\205\001\002\000\026\005" +
    "\077\006\116\007\115\011\072\016\111\026\075\036\101" +
    "\037\112\040\114\047\073\001\002\000\026\005\077\006" +
    "\116\007\115\011\072\016\111\026\075\036\101\037\112" +
    "\040\114\047\073\001\002\000\004\005\173\001\002\000" +
    "\006\051\uffd4\053\uffd4\001\002\000\026\005\077\006\116" +
    "\007\115\011\072\016\111\026\075\036\101\037\112\040" +
    "\114\047\073\001\002\000\006\051\uffd2\053\uffd2\001\002" +
    "\000\006\051\uffdc\053\uffdc\001\002\000\006\051\uffd9\053" +
    "\uffd9\001\002\000\006\051\uffc2\053\uffc2\001\002\000\026" +
    "\005\077\006\116\007\115\011\072\016\111\026\075\036" +
    "\101\037\112\040\114\047\073\001\002\000\026\005\077" +
    "\006\116\007\115\011\072\016\111\026\075\036\101\037" +
    "\112\040\114\047\073\001\002\000\006\051\uffd8\053\uffd8" +
    "\001\002\000\006\051\uffdb\053\uffdb\001\002\000\006\051" +
    "\uffd7\053\uffd7\001\002\000\006\051\uffdf\053\161\001\002" +
    "\000\006\051\uffd5\053\uffd5\001\002\000\006\051\uffd3\053" +
    "\uffd3\001\002\000\006\051\uffd6\053\uffd6\001\002\000\026" +
    "\005\077\006\116\007\115\011\072\016\111\026\075\036" +
    "\101\037\112\040\114\047\073\001\002\000\026\005\077" +
    "\006\116\007\115\011\072\016\111\026\075\036\101\037" +
    "\112\040\114\047\073\001\002\000\006\051\uffda\053\uffda" +
    "\001\002\000\006\051\uffca\053\uffca\001\002\000\026\005" +
    "\uff9e\006\uff9e\007\uff9e\011\uff9e\016\uff9e\026\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\047\uff9e\001\002\000\060\010\uffa9\011" +
    "\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\017\uffa9\024\uffa9" +
    "\025\uffa9\043\uffa9\044\uffa9\045\uffa9\050\uffa9\051\uffa9\053" +
    "\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9" +
    "\064\uffa9\066\uffa9\001\002\000\006\051\uffc8\053\uffc8\001" +
    "\002\000\026\005\uff9d\006\uff9d\007\uff9d\011\uff9d\016\uff9d" +
    "\026\uff9d\036\uff9d\037\uff9d\040\uff9d\047\uff9d\001\002\000" +
    "\060\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\017\uffb1\024\uffb1\025\uffb1\043\uffb1\044\uffb1\045\uffb1\050" +
    "\uffb1\051\uffb1\053\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\062\uffb1\063\uffb1\064\uffb1\066\uffb1\001\002\000\060\010" +
    "\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\017\uffaa" +
    "\024\uffaa\025\uffaa\043\uffaa\044\uffaa\045\uffaa\050\uffaa\051" +
    "\uffaa\053\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa" +
    "\063\uffaa\064\uffaa\066\uffaa\001\002\000\060\010\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\017\uffb3\024\uffb3" +
    "\025\uffb3\043\uffb3\044\152\045\uffb3\050\uffb3\051\uffb3\053" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3" +
    "\064\151\066\153\001\002\000\060\010\uffae\011\uffae\012" +
    "\uffae\013\uffae\014\uffae\015\uffae\017\uffae\024\uffae\025\uffae" +
    "\043\uffae\044\uffae\045\uffae\050\uffae\051\uffae\053\uffae\056" +
    "\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae" +
    "\066\uffae\001\002\000\052\010\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\017\uffb5\024\uffb5\025\uffb5\043\uffb5" +
    "\045\uffb5\050\uffb5\051\uffb5\053\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\001\002\000\052\010\uffb7" +
    "\011\uffb7\012\144\013\143\014\uffb7\015\uffb7\017\uffb7\024" +
    "\142\025\145\043\141\045\uffb7\050\uffb7\051\uffb7\053\uffb7" +
    "\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\001" +
    "\002\000\040\010\uffba\011\136\014\uffba\015\uffba\017\uffba" +
    "\045\uffba\050\uffba\051\uffba\053\uffba\056\uffba\057\uffba\060" +
    "\uffba\061\uffba\062\uffba\063\uffba\001\002\000\036\010\133" +
    "\014\uffbd\015\uffbd\017\uffbd\045\uffbd\050\uffbd\051\uffbd\053" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd" +
    "\001\002\000\034\014\126\015\uffbf\017\uffbf\045\uffbf\050" +
    "\uffbf\051\uffbf\053\uffbf\056\124\057\131\060\130\061\127" +
    "\062\122\063\123\001\002\000\060\010\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\017\uffb0\024\uffb0\025\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\050\uffb0\051\uffb0\053\uffb0\056" +
    "\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0" +
    "\066\uffb0\001\002\000\014\015\uffc1\017\uffc1\050\uffc1\051" +
    "\uffc1\053\uffc1\001\002\000\026\005\077\006\116\007\115" +
    "\011\072\016\111\026\075\036\101\037\112\040\114\047" +
    "\073\001\002\000\060\010\uffad\011\uffad\012\uffad\013\uffad" +
    "\014\uffad\015\uffad\017\uffad\024\uffad\025\uffad\043\uffad\044" +
    "\uffad\045\uffad\050\uffad\051\uffad\053\uffad\056\uffad\057\uffad" +
    "\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\066\uffad\001" +
    "\002\000\026\005\077\006\116\007\115\011\072\016\111" +
    "\026\075\036\101\037\112\040\114\047\073\001\002\000" +
    "\060\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\017\uffa8\024\uffa8\025\uffa8\043\uffa8\044\uffa8\045\uffa8\050" +
    "\uffa8\051\uffa8\053\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8" +
    "\062\uffa8\063\uffa8\064\uffa8\066\uffa8\001\002\000\060\010" +
    "\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\017\uffab" +
    "\024\uffab\025\uffab\043\uffab\044\uffab\045\uffab\050\uffab\051" +
    "\uffab\053\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab" +
    "\063\uffab\064\uffab\066\uffab\001\002\000\060\010\uffac\011" +
    "\uffac\012\uffac\013\uffac\014\uffac\015\uffac\017\uffac\024\uffac" +
    "\025\uffac\043\uffac\044\uffac\045\uffac\050\uffac\051\uffac\053" +
    "\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac" +
    "\064\uffac\066\uffac\001\002\000\052\010\uffb4\011\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\017\uffb4\024\uffb4\025\uffb4" +
    "\043\uffb4\045\uffb4\050\uffb4\051\uffb4\053\uffb4\056\uffb4\057" +
    "\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\001\002\000\004" +
    "\017\121\001\002\000\060\010\uffaf\011\uffaf\012\uffaf\013" +
    "\uffaf\014\uffaf\015\uffaf\017\uffaf\024\uffaf\025\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\050\uffaf\051\uffaf\053\uffaf\056\uffaf\057" +
    "\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\066\uffaf" +
    "\001\002\000\026\005\uffa5\006\uffa5\007\uffa5\011\uffa5\016" +
    "\uffa5\026\uffa5\036\uffa5\037\uffa5\040\uffa5\047\uffa5\001\002" +
    "\000\026\005\uffa4\006\uffa4\007\uffa4\011\uffa4\016\uffa4\026" +
    "\uffa4\036\uffa4\037\uffa4\040\uffa4\047\uffa4\001\002\000\026" +
    "\005\077\006\116\007\115\011\072\016\111\026\075\036" +
    "\101\037\112\040\114\047\073\001\002\000\026\005\077" +
    "\006\116\007\115\011\072\016\111\026\075\036\101\037" +
    "\112\040\114\047\073\001\002\000\026\005\uffa3\006\uffa3" +
    "\007\uffa3\011\uffa3\016\uffa3\026\uffa3\036\uffa3\037\uffa3\040" +
    "\uffa3\047\uffa3\001\002\000\026\005\uffa2\006\uffa2\007\uffa2" +
    "\011\uffa2\016\uffa2\026\uffa2\036\uffa2\037\uffa2\040\uffa2\047" +
    "\uffa2\001\002\000\026\005\uffa6\006\uffa6\007\uffa6\011\uffa6" +
    "\016\uffa6\026\uffa6\036\uffa6\037\uffa6\040\uffa6\047\uffa6\001" +
    "\002\000\026\005\uffa7\006\uffa7\007\uffa7\011\uffa7\016\uffa7" +
    "\026\uffa7\036\uffa7\037\uffa7\040\uffa7\047\uffa7\001\002\000" +
    "\036\010\133\014\uffbe\015\uffbe\017\uffbe\045\uffbe\050\uffbe" +
    "\051\uffbe\053\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062" +
    "\uffbe\063\uffbe\001\002\000\026\005\077\006\116\007\115" +
    "\011\072\016\111\026\075\036\101\037\112\040\114\047" +
    "\073\001\002\000\036\010\uffbc\014\uffbc\015\uffbc\017\uffbc" +
    "\045\uffbc\050\uffbc\051\uffbc\053\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\001\002\000\016\015\uffc0" +
    "\017\uffc0\045\uffc0\050\uffc0\051\uffc0\053\uffc0\001\002\000" +
    "\026\005\077\006\116\007\115\011\072\016\111\026\075" +
    "\036\101\037\112\040\114\047\073\001\002\000\036\010" +
    "\uffbb\014\uffbb\015\uffbb\017\uffbb\045\uffbb\050\uffbb\051\uffbb" +
    "\053\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\001\002\000\026\005\077\006\116\007\115\011\072" +
    "\016\111\026\075\036\101\037\112\040\114\047\073\001" +
    "\002\000\026\005\uff9f\006\uff9f\007\uff9f\011\uff9f\016\uff9f" +
    "\026\uff9f\036\uff9f\037\uff9f\040\uff9f\047\uff9f\001\002\000" +
    "\026\005\077\006\116\007\115\011\072\016\111\026\075" +
    "\036\101\037\112\040\114\047\073\001\002\000\026\005" +
    "\uffa0\006\uffa0\007\uffa0\011\uffa0\016\uffa0\026\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\047\uffa0\001\002\000\026\005\uffa1\006" +
    "\uffa1\007\uffa1\011\uffa1\016\uffa1\026\uffa1\036\uffa1\037\uffa1" +
    "\040\uffa1\047\uffa1\001\002\000\026\005\077\006\116\007" +
    "\115\011\072\016\111\026\075\036\101\037\112\040\114" +
    "\047\073\001\002\000\046\010\uffb8\011\uffb8\012\144\013" +
    "\143\014\uffb8\015\uffb8\017\uffb8\043\141\045\uffb8\050\uffb8" +
    "\051\uffb8\053\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\001\002\000\040\010\uffb9\011\uffb9\014\uffb9" +
    "\015\uffb9\017\uffb9\045\uffb9\050\uffb9\051\uffb9\053\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\001\002" +
    "\000\052\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\017\uffb6\024\uffb6\025\uffb6\043\uffb6\045\uffb6\050\uffb6" +
    "\051\uffb6\053\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062" +
    "\uffb6\063\uffb6\001\002\000\004\005\157\001\002\000\026" +
    "\005\077\006\116\007\115\011\072\016\111\026\075\036" +
    "\101\037\112\040\114\047\073\001\002\000\060\010\uff9c" +
    "\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\017\uff9c\024" +
    "\uff9c\025\uff9c\043\uff9c\044\uff9c\045\uff9c\050\uff9c\051\uff9c" +
    "\053\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063" +
    "\uff9c\064\uff9c\066\uff9c\001\002\000\060\010\uffb2\011\uffb2" +
    "\012\uffb2\013\uffb2\014\uffb2\015\uffb2\017\uffb2\024\uffb2\025" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\050\uffb2\051\uffb2\053\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064" +
    "\uffb2\066\uffb2\001\002\000\004\045\156\001\002\000\060" +
    "\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\017" +
    "\uff9a\024\uff9a\025\uff9a\043\uff9a\044\uff9a\045\uff9a\050\uff9a" +
    "\051\uff9a\053\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062" +
    "\uff9a\063\uff9a\064\uff9a\066\uff9a\001\002\000\060\010\uff9b" +
    "\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\017\uff9b\024" +
    "\uff9b\025\uff9b\043\uff9b\044\uff9b\045\uff9b\050\uff9b\051\uff9b" +
    "\053\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063" +
    "\uff9b\064\uff9b\066\uff9b\001\002\000\006\051\uffc9\053\uffc9" +
    "\001\002\000\026\004\045\030\055\032\044\033\056\034" +
    "\050\035\071\041\066\042\067\050\004\054\046\001\002" +
    "\000\006\051\uffdd\053\uffdd\001\002\000\006\051\uffcb\053" +
    "\uffcb\001\002\000\004\050\004\001\002\000\010\031\167" +
    "\051\uffce\053\uffce\001\002\000\006\051\uffd0\053\uffd0\001" +
    "\002\000\004\050\004\001\002\000\006\051\uffcf\053\uffcf" +
    "\001\002\000\004\050\004\001\002\000\006\051\uffcd\053" +
    "\uffcd\001\002\000\004\016\174\001\002\000\030\005\077" +
    "\006\116\007\115\011\072\016\111\017\uffc5\026\075\036" +
    "\101\037\112\040\114\047\073\001\002\000\006\015\uffc3" +
    "\017\uffc3\001\002\000\004\017\202\001\002\000\006\015" +
    "\200\017\uffc6\001\002\000\026\005\077\006\116\007\115" +
    "\011\072\016\111\026\075\036\101\037\112\040\114\047" +
    "\073\001\002\000\006\015\uffc4\017\uffc4\001\002\000\006" +
    "\051\uffc7\053\uffc7\001\002\000\006\051\uffd1\053\uffd1\001" +
    "\002\000\006\051\uffcc\053\uffcc\001\002\000\014\002\uffff" +
    "\031\uffff\051\uffff\053\uffff\065\uffff\001\002\000\006\053" +
    "\uffe7\065\uffe7\001\002\000\004\016\210\001\002\000\022" +
    "\005\012\017\uffe4\020\015\021\022\022\020\023\024\046" +
    "\010\066\016\001\002\000\010\005\221\044\037\055\220" +
    "\001\002\000\006\015\uffe2\017\uffe2\001\002\000\004\017" +
    "\217\001\002\000\006\015\215\017\uffe5\001\002\000\020" +
    "\005\012\020\015\021\022\022\020\023\024\046\010\066" +
    "\016\001\002\000\006\015\uffe3\017\uffe3\001\002\000\004" +
    "\050\uffe6\001\002\000\004\005\222\001\002\000\006\015" +
    "\uffe1\017\uffe1\001\002\000\006\015\uffe0\017\uffe0\001\002" +
    "\000\010\005\ufff4\044\ufff4\055\ufff4\001\002\000\006\005" +
    "\225\044\037\001\002\000\006\053\uffe8\065\uffe8\001\002" +
    "\000\020\005\012\020\015\021\022\022\020\023\024\046" +
    "\010\066\016\001\002\000\004\051\234\001\002\000\006" +
    "\015\232\051\uffeb\001\002\000\006\015\uffe9\051\uffe9\001" +
    "\002\000\020\005\012\020\015\021\022\022\020\023\024" +
    "\046\010\066\016\001\002\000\006\015\uffea\051\uffea\001" +
    "\002\000\010\005\uffec\044\uffec\055\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\006\002\004\003\005\001\001\000\030\004" +
    "\025\006\032\010\012\011\022\012\010\013\016\016\030" +
    "\017\024\042\031\043\027\044\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\016\042\223\043\027\044\026\001\001\000\002" +
    "\001\001\000\010\013\016\043\222\044\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\205\001\001\000\036\003\053\005\042\023\061\024\051" +
    "\025\057\026\067\027\052\030\056\031\060\032\064\033" +
    "\062\034\046\035\063\036\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\035\011\022" +
    "\012\010\013\016\016\030\017\024\042\031\043\027\044" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\007\203\046\107\047\105\050\104\051\103" +
    "\052\102\053\101\054\077\055\075\063\112\065\106\001" +
    "\001\000\030\007\202\046\107\047\105\050\104\051\103" +
    "\052\102\053\101\054\077\055\075\063\112\065\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\007\170" +
    "\046\107\047\105\050\104\051\103\052\102\053\101\054" +
    "\077\055\075\063\112\065\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\007\163\046\107\047\105\050\104\051\103\052\102" +
    "\053\101\054\077\055\075\063\112\065\106\001\001\000" +
    "\030\007\162\046\107\047\105\050\104\051\103\052\102" +
    "\053\101\054\077\055\075\063\112\065\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\007\157\046\107\047\105\050\104\051\103" +
    "\052\102\053\101\054\077\055\075\063\112\065\106\001" +
    "\001\000\030\007\073\046\107\047\105\050\104\051\103" +
    "\052\102\053\101\054\077\055\075\063\112\065\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\046" +
    "\117\047\105\050\104\051\103\052\102\053\101\054\077" +
    "\055\075\063\112\065\106\001\001\000\002\001\001\000" +
    "\014\053\116\054\077\055\075\063\112\065\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\046\134\047\105\050" +
    "\104\051\103\052\102\053\101\054\077\055\075\063\112" +
    "\065\106\001\001\000\022\050\131\051\103\052\102\053" +
    "\101\054\077\055\075\063\112\065\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\051\133\052\102\053\101" +
    "\054\077\055\075\063\112\065\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\051\136\052\102\053\101" +
    "\054\077\055\075\063\112\065\106\001\001\000\002\001" +
    "\001\000\014\053\147\054\077\055\075\063\112\065\106" +
    "\001\001\000\002\001\001\000\020\051\146\052\102\053" +
    "\101\054\077\055\075\063\112\065\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\052\145\053\101\054" +
    "\077\055\075\063\112\065\106\001\001\000\004\062\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\046\154\047\105\050\104\051\103\052\102" +
    "\053\101\054\077\055\075\063\112\065\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\053\024\161\025\057\026\067\027\052\030\056\031\060" +
    "\032\064\033\062\034\046\035\063\036\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\164\001\001" +
    "\000\004\037\165\001\001\000\002\001\001\000\004\003" +
    "\167\001\001\000\002\001\001\000\004\003\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\007\174\040" +
    "\175\041\176\046\107\047\105\050\104\051\103\052\102" +
    "\053\101\054\077\055\075\063\112\065\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\007\200\046\107\047\105\050\104\051\103\052\102\053" +
    "\101\054\077\055\075\063\112\065\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\016\020\211\021\213\022\212\042\210\043" +
    "\027\044\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\013\016\020" +
    "\215\042\210\043\027\044\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\011\230\013\016\014\226\015\227\042" +
    "\031\043\027\044\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\011\232\013\016\042" +
    "\031\043\027\044\026\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAP declaraciones instrucciones LLACIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloque",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= lista_declaraciones DOBLEAMPERSAND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones ::= lista_declaraciones PUNTOCOMA declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= declaracion_tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= declaracion_procedimiento 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_variable ::= tipo0 IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion_variable",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo0 ::= tipo0 CAP ENT CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo0",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo0 ::= tipo1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo0",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo1 ::= FARR tipo1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo1",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo1 ::= tipo2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo1",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo2 ::= registro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo2 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo2 ::= PR_INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo2 ::= PR_REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo2 ::= PR_BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo2 ::= PR_STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // registro ::= STRUCT LLAP campos LLACIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("registro",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // campos ::= l_campos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campos",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // l_campos ::= l_campos COMA declaracion_variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("l_campos",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // l_campos ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("l_campos",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_tipo ::= TYPE tipo0 IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion_procedimiento ::= cabeza bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cabeza ::= PROC IDEN PAP parametros PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("cabeza",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros ::= lista_parametros 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_parametros ::= lista_parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametro ::= tipo0 IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametro",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametro ::= tipo0 AMPERSAND IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametro",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instrucciones ::= lista_instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instrucciones ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_instrucciones ::= lista_instrucciones PUNTOCOMA instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= instr_eval 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= instr_cond 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= instr_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= instr_lectura 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= instr_escritura 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= instr_nl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= instr_reserv_mem 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= instr_libera_mem 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= instr_invproc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= instr_compu 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instr_eval ::= EVALUA expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_eval",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instr_cond ::= IF expresion bloque instr_else 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_cond",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instr_else ::= ELSE bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_else",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instr_else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_else",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instr_while ::= WHILE expresion bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_while",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instr_lectura ::= READ expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_lectura",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instr_escritura ::= WRITE expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_escritura",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instr_nl ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_nl",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instr_reserv_mem ::= NEW expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_reserv_mem",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instr_libera_mem ::= DELETE expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_libera_mem",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instr_invproc ::= CALL IDEN PAP param_reales PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_invproc",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // param_reales ::= lista_param_reales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("param_reales",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // param_reales ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("param_reales",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista_param_reales ::= lista_param_reales COMA expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_reales",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_param_reales ::= expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_reales",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instr_compu ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_compu",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E0 ::= E1 ASIGNACION E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E1 ::= E1 OP1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E2 ::= E2 MAS E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E2 ::= E3 MENOS E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E3 ::= E4 AND E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E3 ::= E4 OR E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E4 ::= E4 OP4 E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E5 ::= OP5 E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E6 ::= E6 OP6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E7 ::= EXPR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E7 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPR ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPR ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPR ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPR ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPR ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPR ::= CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPR ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP1 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP1 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP1 ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP1 ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP1 ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP1 ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP4 ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP4 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP4 ::= MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP5 ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP5 ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP6 ::= FARR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP6 ::= PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP6 ::= CAP E0 CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

