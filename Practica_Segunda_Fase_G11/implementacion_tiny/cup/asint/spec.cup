package cup.asint;

import java_cup.runtime.*;
import cup.alex.AnalizadorLexicoTiny;
import cup.alex.UnidadLexica;
import cup.errors.GestionErroresTiny;

scan with {: 
  return getScanner().next_token(); 
:};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal     EVALUA, IDEN, ENT, REAL, MAS,
             MENOS, POR, DIV, IGUAL, COMA, PAP, PCIERRE,
             LAP, LCIERRE, CAP, CCIERRE, ASIG, MAYORIG, MENORIG,
             MAYOR, MENOR, DISTINTO, STRUCT,PUNCOMA,
             IF,ELSE,WHILE,READ,WRITE,NL,
             NEW,DELETE,CALL, MOD, POTENCIA, PUNTO, CADENA,
             TRUE, FALSE, NULL, PR_ENT, PR_BOOL, PR_REAL, PR_STRING,
             CIERREDECLARACION, AMPERSAND, AND, OR, NOT,TYPE,PROC
             
             
             ;

non terminal  programa,bloque, expresion, declaraciones, 
              lista_declaraciones, declaracion, decvar, tipo0, tipo1, tipo2, tipo_basico, registro,
              campos, l_campos, dectipo, decproc, cabeza,parametros,lista_parametros,parametro,
              instrucciones, lista_instrucciones, instruccion, instr_eval, instr_cond ,
              instr_else, instr_while, instr_lectura, instr_escritura, instr_nl,
              instr_reserv_mem, instr_libera_mem, instr_invproc, param_reales,lista_param_reales,
              instr_compu,
              E0, E1, E2, E3, E4, E5, E6, E7, EXPR_B, OP1, OP4, OP5, OP6
              ;

programa      ::= bloque ;
bloque        ::= LAP declaraciones instrucciones LCIERRE;

declaraciones ::= lista_declaraciones CIERREDECLARACION;
declaraciones ::= ;
lista_declaraciones ::= lista_declaraciones PUNCOMA declaracion ;
lista_declaraciones ::= declaracion ;

declaracion ::= decvar;
declaracion ::= dectipo;
declaracion ::= decproc;

decvar ::= tipo0 IDEN;

tipo0 ::= tipo0 CAP ENT CCIERRE;
tipo0 ::= tipo1;
tipo1 ::= POTENCIA tipo1;
tipo1 ::= tipo2;
tipo2 ::= tipo_basico;
tipo2 ::= registro;
tipo2 ::= IDEN;
tipo_basico ::= PR_ENT;
tipo_basico ::= PR_REAL;
tipo_basico ::= PR_BOOL;
tipo_basico ::= PR_STRING;

registro ::= STRUCT LAP campos LCIERRE;
campos ::= l_campos;
l_campos ::= l_campos COMA decvar;
l_campos ::= decvar;

dectipo ::= TYPE tipo0 IDEN;

decproc ::= cabeza bloque;
cabeza ::= PROC IDEN PAP parametros PCIERRE;

parametros ::= lista_parametros;
parametros ::= ;
lista_parametros ::= lista_parametros COMA parametro;
lista_parametros ::= parametro;

parametro ::= tipo0 IDEN;
parametro ::= tipo0 AMPERSAND IDEN;


//instrucciones
instrucciones ::= lista_instrucciones ;
instrucciones ::= ;
lista_instrucciones ::= lista_instrucciones  PUNCOMA instruccion ;
lista_instrucciones ::= instruccion ;
instruccion ::= instr_eval;
instruccion ::= instr_cond;
instruccion ::= instr_while;
instruccion ::= instr_lectura;
instruccion ::= instr_escritura;
instruccion ::= instr_nl;
instruccion ::= instr_reserv_mem;
instruccion ::= instr_libera_mem;
instruccion ::= instr_invproc;
instruccion ::= instr_compu;

instr_eval ::= EVALUA expresion;
instr_cond ::= IF expresion bloque instr_else;
instr_else::= ELSE bloque;
instr_else::=;
instr_while ::= WHILE expresion bloque;
instr_lectura ::= READ expresion;
instr_escritura ::= WRITE expresion;
instr_nl ::= NL;
instr_reserv_mem ::= NEW expresion;
instr_libera_mem ::= DELETE expresion;
instr_invproc ::= CALL IDEN PAP param_reales PCIERRE;
param_reales::= lista_param_reales;
param_reales::=;
lista_param_reales::=lista_param_reales COMA expresion;
lista_param_reales::=expresion;
instr_compu ::= bloque;

//Expresiones
expresion::= E0;
E0 ::= E1 ASIG E0;
E0 ::= E1;

E1 ::= E1 OP1 E2 ;
E1 ::= E2 ;

E2 ::= E2 MAS E3 ;
E2 ::= E3 MENOS E3 ;
E2 ::= E3 ;

E3 ::= E4 AND E3 ;
E3 ::= E4 OR E4 ;
E3 ::= E4 ;

E4 ::= E4 OP4 E5 ;
E4 ::= E5 ;

E5 ::= OP5 E5 ;
E5 ::= E6 ;

E6 ::= E6 OP6 ;
E6 ::= E7 ;

E7 ::= EXPR_B ;
E7 ::= PAP E0 PCIERRE ;

EXPR_B ::= TRUE ;
EXPR_B ::= FALSE ;
EXPR_B ::= ENT ;
EXPR_B ::= REAL ;
EXPR_B ::= IDEN ;
EXPR_B ::= CADENA ;
EXPR_B ::= NULL ;

OP1 ::= MAYOR ;
OP1 ::= MENOR ;
OP1 ::= MAYORIG ;
OP1 ::= MENORIG ;
OP1 ::= IGUAL ;
OP1 ::= DISTINTO ;

OP4 ::= POR ;
OP4 ::= DIV ;
OP4 ::= MOD ;

OP5 ::= MENOS ;
OP5 ::= NOT ;

OP6 ::= POTENCIA ;
OP6 ::= PUNTO IDEN ;
OP6 ::= CAP E0 CCIERRE ;