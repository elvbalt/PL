
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue Mar 05 18:51:36 CET 2024
//----------------------------------------------------

package cup.asint;

import java_cup.runtime.*;
import cup.alex.AnalizadorLexicoTiny;
import cup.alex.UnidadLexica;
import cup.errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue Mar 05 18:51:36 CET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\005\004\000\002\005\002\000\002\006\005" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\010\004\000\002\011\006\000\002" +
    "\011\003\000\002\012\004\000\002\012\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\015\006\000\002\016\003\000\002\017\005\000\002" +
    "\017\003\000\002\020\005\000\002\021\004\000\002\022" +
    "\007\000\002\023\003\000\002\023\002\000\002\024\005" +
    "\000\002\024\003\000\002\025\004\000\002\025\005\000" +
    "\002\026\003\000\002\026\002\000\002\027\005\000\002" +
    "\027\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\031\004\000\002\032\006\000\002" +
    "\033\004\000\002\033\002\000\002\034\005\000\002\035" +
    "\004\000\002\036\004\000\002\037\003\000\002\040\004" +
    "\000\002\041\004\000\002\042\007\000\002\043\003\000" +
    "\002\043\002\000\002\044\005\000\002\044\003\000\002" +
    "\045\003\000\002\004\003\000\002\046\005\000\002\046" +
    "\003\000\002\047\005\000\002\047\003\000\002\050\005" +
    "\000\002\050\005\000\002\050\003\000\002\051\005\000" +
    "\002\051\005\000\002\051\003\000\002\052\005\000\002" +
    "\052\003\000\002\053\004\000\002\053\003\000\002\054" +
    "\004\000\002\054\003\000\002\055\003\000\002\055\005" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\061\003\000\002\061\003\000\002\062\003\000\002" +
    "\062\004\000\002\062\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\020\006\001\002\000\004\002\235\001" +
    "\002\000\004\002\001\001\002\000\052\004\ufffd\005\013" +
    "\020\ufffd\021\ufffd\032\007\034\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\046\012\054\014" +
    "\055\021\056\023\057\024\065\016\066\022\001\002\000" +
    "\004\020\226\001\002\000\006\033\ufffa\060\ufffa\001\002" +
    "\000\010\005\ufff2\022\ufff2\061\ufff2\001\002\000\020\005" +
    "\013\032\007\046\012\054\014\055\021\056\023\057\024" +
    "\001\002\000\010\005\ufff0\022\ufff0\061\ufff0\001\002\000" +
    "\010\005\uffef\022\uffef\061\uffef\001\002\000\006\033\ufffb" +
    "\060\ufffb\001\002\000\020\005\013\032\007\046\012\054" +
    "\014\055\021\056\023\057\024\001\002\000\010\005\ufff1" +
    "\022\ufff1\061\ufff1\001\002\000\006\033\ufff9\060\ufff9\001" +
    "\002\000\010\005\uffed\022\uffed\061\uffed\001\002\000\004" +
    "\005\207\001\002\000\010\005\uffee\022\uffee\061\uffee\001" +
    "\002\000\010\005\uffec\022\uffec\061\uffec\001\002\000\004" +
    "\020\006\001\002\000\030\004\045\020\006\021\uffdd\034" +
    "\055\036\050\037\043\040\056\041\071\042\066\043\067" +
    "\044\046\001\002\000\010\005\ufff3\022\ufff3\061\ufff3\001" +
    "\002\000\010\005\ufff5\022\ufff5\061\ufff5\001\002\000\006" +
    "\033\ufff8\060\ufff8\001\002\000\006\005\040\022\037\001" +
    "\002\000\006\033\034\060\035\001\002\000\024\005\013" +
    "\032\007\046\012\054\014\055\021\056\023\057\024\065" +
    "\016\066\022\001\002\000\030\004\ufffe\020\ufffe\021\ufffe" +
    "\034\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\001\002\000\006\033\ufffc\060\ufffc\001\002" +
    "\000\004\006\041\001\002\000\012\015\ufff7\021\ufff7\033" +
    "\ufff7\060\ufff7\001\002\000\004\023\042\001\002\000\010" +
    "\005\ufff6\022\ufff6\061\ufff6\001\002\000\026\005\100\006" +
    "\116\007\114\011\072\016\111\050\073\051\101\052\112" +
    "\053\115\064\075\001\002\000\004\021\204\001\002\000" +
    "\026\005\100\006\116\007\114\011\072\016\111\050\073" +
    "\051\101\052\112\053\115\064\075\001\002\000\004\005" +
    "\173\001\002\000\006\021\uffd3\033\uffd3\001\002\000\026" +
    "\005\100\006\116\007\114\011\072\016\111\050\073\051" +
    "\101\052\112\053\115\064\075\001\002\000\006\021\uffd1" +
    "\033\uffd1\001\002\000\006\021\uffd8\033\uffd8\001\002\000" +
    "\006\021\uffdb\033\uffdb\001\002\000\006\021\uffc1\033\uffc1" +
    "\001\002\000\026\005\100\006\116\007\114\011\072\016" +
    "\111\050\073\051\101\052\112\053\115\064\075\001\002" +
    "\000\026\005\100\006\116\007\114\011\072\016\111\050" +
    "\073\051\101\052\112\053\115\064\075\001\002\000\006" +
    "\021\uffd7\033\uffd7\001\002\000\006\021\uffda\033\uffda\001" +
    "\002\000\006\021\uffd6\033\uffd6\001\002\000\006\021\uffde" +
    "\033\161\001\002\000\006\021\uffd2\033\uffd2\001\002\000" +
    "\006\021\uffd4\033\uffd4\001\002\000\006\021\uffd5\033\uffd5" +
    "\001\002\000\026\005\100\006\116\007\114\011\072\016" +
    "\111\050\073\051\101\052\112\053\115\064\075\001\002" +
    "\000\026\005\100\006\116\007\114\011\072\016\111\050" +
    "\073\051\101\052\112\053\115\064\075\001\002\000\006" +
    "\021\uffd9\033\uffd9\001\002\000\006\021\uffc9\033\uffc9\001" +
    "\002\000\026\005\uff9d\006\uff9d\007\uff9d\011\uff9d\016\uff9d" +
    "\050\uff9d\051\uff9d\052\uff9d\053\uff9d\064\uff9d\001\002\000" +
    "\060\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\033\uffa8\045\uffa8" +
    "\046\uffa8\047\uffa8\062\uffa8\063\uffa8\001\002\000\006\021" +
    "\uffc7\033\uffc7\001\002\000\026\005\uff9c\006\uff9c\007\uff9c" +
    "\011\uff9c\016\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\064" +
    "\uff9c\001\002\000\060\010\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\033\uffb0\045\uffb0\046\uffb0\047\uffb0\062\uffb0\063\uffb0\001" +
    "\002\000\060\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf" +
    "\015\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\062\uffaf\063\uffaf\001\002\000" +
    "\060\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\033\uffa9\045\uffa9" +
    "\046\uffa9\047\uffa9\062\uffa9\063\uffa9\001\002\000\060\010" +
    "\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\017\uffad" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026" +
    "\uffad\027\uffad\030\uffad\031\uffad\033\uffad\045\uffad\046\uffad" +
    "\047\uffad\062\uffad\063\uffad\001\002\000\060\010\uffb2\011" +
    "\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\022\152\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\033\uffb2\045\uffb2\046\153\047\151" +
    "\062\uffb2\063\uffb2\001\002\000\052\010\uffb4\011\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\033\uffb4\045\uffb4\062\uffb4\063\uffb4\001\002\000\052" +
    "\010\uffb6\011\uffb6\012\144\013\143\014\uffb6\015\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\033\uffb6\045\141\062\142\063" +
    "\145\001\002\000\040\010\uffb9\011\136\014\uffb9\015\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\023\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\033\uffb9\001\002\000\036" +
    "\010\134\014\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\033\uffbc\001\002\000\034\014\123\015\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\023\uffbe\024\130\025\131\026\124\027\127" +
    "\030\126\031\125\033\uffbe\001\002\000\014\015\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\033\uffc0\001\002\000\026\005\100" +
    "\006\116\007\114\011\072\016\111\050\073\051\101\052" +
    "\112\053\115\064\075\001\002\000\060\010\uffac\011\uffac" +
    "\012\uffac\013\uffac\014\uffac\015\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\030\uffac\031\uffac\033\uffac\045\uffac\046\uffac\047\uffac\062" +
    "\uffac\063\uffac\001\002\000\026\005\100\006\116\007\114" +
    "\011\072\016\111\050\073\051\101\052\112\053\115\064" +
    "\075\001\002\000\060\010\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\033\uffaa\045\uffaa\046\uffaa\047\uffaa\062\uffaa\063\uffaa\001" +
    "\002\000\060\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\033\uffa7" +
    "\045\uffa7\046\uffa7\047\uffa7\062\uffa7\063\uffa7\001\002\000" +
    "\060\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab" +
    "\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\033\uffab\045\uffab" +
    "\046\uffab\047\uffab\062\uffab\063\uffab\001\002\000\052\010" +
    "\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\033\uffb3\045\uffb3\062\uffb3\063\uffb3" +
    "\001\002\000\004\017\121\001\002\000\060\010\uffae\011" +
    "\uffae\012\uffae\013\uffae\014\uffae\015\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027" +
    "\uffae\030\uffae\031\uffae\033\uffae\045\uffae\046\uffae\047\uffae" +
    "\062\uffae\063\uffae\001\002\000\026\005\100\006\116\007" +
    "\114\011\072\016\111\050\073\051\101\052\112\053\115" +
    "\064\075\001\002\000\026\005\uffa2\006\uffa2\007\uffa2\011" +
    "\uffa2\016\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\064\uffa2" +
    "\001\002\000\026\005\uffa3\006\uffa3\007\uffa3\011\uffa3\016" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\064\uffa3\001\002" +
    "\000\026\005\uffa1\006\uffa1\007\uffa1\011\uffa1\016\uffa1\050" +
    "\uffa1\051\uffa1\052\uffa1\053\uffa1\064\uffa1\001\002\000\026" +
    "\005\uffa5\006\uffa5\007\uffa5\011\uffa5\016\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\064\uffa5\001\002\000\026\005\uffa6" +
    "\006\uffa6\007\uffa6\011\uffa6\016\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\053\uffa6\064\uffa6\001\002\000\026\005\100\006\116" +
    "\007\114\011\072\016\111\050\073\051\101\052\112\053" +
    "\115\064\075\001\002\000\026\005\uffa4\006\uffa4\007\uffa4" +
    "\011\uffa4\016\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\064" +
    "\uffa4\001\002\000\016\015\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\023\uffbf\033\uffbf\001\002\000\036\010\134\014\uffbd\015" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd\001\002\000" +
    "\026\005\100\006\116\007\114\011\072\016\111\050\073" +
    "\051\101\052\112\053\115\064\075\001\002\000\036\010" +
    "\uffbb\014\uffbb\015\uffbb\017\uffbb\020\uffbb\021\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\033" +
    "\uffbb\001\002\000\026\005\100\006\116\007\114\011\072" +
    "\016\111\050\073\051\101\052\112\053\115\064\075\001" +
    "\002\000\036\010\uffba\014\uffba\015\uffba\017\uffba\020\uffba" +
    "\021\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\033\uffba\001\002\000\026\005\100\006\116" +
    "\007\114\011\072\016\111\050\073\051\101\052\112\053" +
    "\115\064\075\001\002\000\026\005\uff9e\006\uff9e\007\uff9e" +
    "\011\uff9e\016\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\064" +
    "\uff9e\001\002\000\026\005\100\006\116\007\114\011\072" +
    "\016\111\050\073\051\101\052\112\053\115\064\075\001" +
    "\002\000\026\005\uff9f\006\uff9f\007\uff9f\011\uff9f\016\uff9f" +
    "\050\uff9f\051\uff9f\052\uff9f\053\uff9f\064\uff9f\001\002\000" +
    "\026\005\uffa0\006\uffa0\007\uffa0\011\uffa0\016\uffa0\050\uffa0" +
    "\051\uffa0\052\uffa0\053\uffa0\064\uffa0\001\002\000\026\005" +
    "\100\006\116\007\114\011\072\016\111\050\073\051\101" +
    "\052\112\053\115\064\075\001\002\000\046\010\uffb7\011" +
    "\uffb7\012\144\013\143\014\uffb7\015\uffb7\017\uffb7\020\uffb7" +
    "\021\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\033\uffb7\045\141\001\002\000\040\010\uffb8" +
    "\011\uffb8\014\uffb8\015\uffb8\017\uffb8\020\uffb8\021\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\033\uffb8\001\002\000\052\010\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\017\uffb5\020\uffb5\021\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\033" +
    "\uffb5\045\uffb5\062\uffb5\063\uffb5\001\002\000\004\005\157" +
    "\001\002\000\026\005\100\006\116\007\114\011\072\016" +
    "\111\050\073\051\101\052\112\053\115\064\075\001\002" +
    "\000\060\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015" +
    "\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b" +
    "\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\033\uff9b\045" +
    "\uff9b\046\uff9b\047\uff9b\062\uff9b\063\uff9b\001\002\000\060" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\031\uffb1\033\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\062\uffb1\063\uffb1\001\002\000\004\023\156" +
    "\001\002\000\060\010\uff99\011\uff99\012\uff99\013\uff99\014" +
    "\uff99\015\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99" +
    "\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\033" +
    "\uff99\045\uff99\046\uff99\047\uff99\062\uff99\063\uff99\001\002" +
    "\000\060\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015" +
    "\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\033\uff9a\045" +
    "\uff9a\046\uff9a\047\uff9a\062\uff9a\063\uff9a\001\002\000\006" +
    "\021\uffc8\033\uffc8\001\002\000\026\004\045\020\006\034" +
    "\055\036\050\037\043\040\056\041\071\042\066\043\067" +
    "\044\046\001\002\000\006\021\uffdc\033\uffdc\001\002\000" +
    "\006\021\uffca\033\uffca\001\002\000\004\020\006\001\002" +
    "\000\010\021\uffcd\033\uffcd\035\167\001\002\000\006\021" +
    "\uffcf\033\uffcf\001\002\000\004\020\006\001\002\000\006" +
    "\021\uffce\033\uffce\001\002\000\004\020\006\001\002\000" +
    "\006\021\uffcc\033\uffcc\001\002\000\004\016\174\001\002" +
    "\000\030\005\100\006\116\007\114\011\072\016\111\017" +
    "\uffc4\050\073\051\101\052\112\053\115\064\075\001\002" +
    "\000\006\015\uffc2\017\uffc2\001\002\000\004\017\202\001" +
    "\002\000\006\015\200\017\uffc5\001\002\000\026\005\100" +
    "\006\116\007\114\011\072\016\111\050\073\051\101\052" +
    "\112\053\115\064\075\001\002\000\006\015\uffc3\017\uffc3" +
    "\001\002\000\006\021\uffc6\033\uffc6\001\002\000\006\021" +
    "\uffd0\033\uffd0\001\002\000\014\002\uffff\021\uffff\033\uffff" +
    "\035\uffff\060\uffff\001\002\000\006\021\uffcb\033\uffcb\001" +
    "\002\000\006\033\uffe6\060\uffe6\001\002\000\004\016\210" +
    "\001\002\000\022\005\013\017\uffe3\032\007\046\012\054" +
    "\014\055\021\056\023\057\024\001\002\000\010\005\221" +
    "\022\037\061\220\001\002\000\006\015\uffe1\017\uffe1\001" +
    "\002\000\004\017\217\001\002\000\006\015\215\017\uffe4" +
    "\001\002\000\020\005\013\032\007\046\012\054\014\055" +
    "\021\056\023\057\024\001\002\000\006\015\uffe2\017\uffe2" +
    "\001\002\000\004\020\uffe5\001\002\000\004\005\222\001" +
    "\002\000\006\015\uffe0\017\uffe0\001\002\000\006\015\uffdf" +
    "\017\uffdf\001\002\000\006\005\224\022\037\001\002\000" +
    "\006\033\uffe7\060\uffe7\001\002\000\010\005\ufff4\022\ufff4" +
    "\061\ufff4\001\002\000\020\005\013\032\007\046\012\054" +
    "\014\055\021\056\023\057\024\001\002\000\006\015\uffe8" +
    "\021\uffe8\001\002\000\004\021\234\001\002\000\006\015" +
    "\232\021\uffea\001\002\000\020\005\013\032\007\046\012" +
    "\054\014\055\021\056\023\057\024\001\002\000\006\015" +
    "\uffe9\021\uffe9\001\002\000\010\005\uffeb\022\uffeb\061\uffeb" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\025\006\032\007\014" +
    "\010\007\011\031\012\027\013\026\014\010\015\016\020" +
    "\017\021\030\022\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\224\013\026\014" +
    "\010\015\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\222\012\027\013\026\014" +
    "\010\015\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\205\001\001\000\036\003\053" +
    "\026\043\027\061\030\052\031\057\032\067\034\051\035" +
    "\056\036\060\037\064\040\063\041\046\042\062\045\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\007\035" +
    "\010\007\011\031\012\027\013\026\014\010\015\016\020" +
    "\017\021\030\022\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\204\046\107\047\106" +
    "\050\105\051\104\052\103\053\102\054\101\055\075\056" +
    "\076\061\112\001\001\000\002\001\001\000\030\004\202" +
    "\046\107\047\106\050\105\051\104\052\103\053\102\054" +
    "\101\055\075\056\076\061\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\170\046\107\047\106\050" +
    "\105\051\104\052\103\053\102\054\101\055\075\056\076" +
    "\061\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\163\046\107" +
    "\047\106\050\105\051\104\052\103\053\102\054\101\055" +
    "\075\056\076\061\112\001\001\000\030\004\162\046\107" +
    "\047\106\050\105\051\104\052\103\053\102\054\101\055" +
    "\075\056\076\061\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\157" +
    "\046\107\047\106\050\105\051\104\052\103\053\102\054" +
    "\101\055\075\056\076\061\112\001\001\000\030\004\073" +
    "\046\107\047\106\050\105\051\104\052\103\053\102\054" +
    "\101\055\075\056\076\061\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\153\001\001\000\002\001\001\000\004\060\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\121\001" +
    "\001\000\002\001\001\000\026\046\117\047\106\050\105" +
    "\051\104\052\103\053\102\054\101\055\075\056\076\061" +
    "\112\001\001\000\002\001\001\000\014\053\116\054\101" +
    "\055\075\056\076\061\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\050\132\051\104\052" +
    "\103\053\102\054\101\055\075\056\076\061\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\046\131\047\106" +
    "\050\105\051\104\052\103\053\102\054\101\055\075\056" +
    "\076\061\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\051\134\052\103\053\102\054" +
    "\101\055\075\056\076\061\112\001\001\000\002\001\001" +
    "\000\020\051\136\052\103\053\102\054\101\055\075\056" +
    "\076\061\112\001\001\000\002\001\001\000\014\053\147" +
    "\054\101\055\075\056\076\061\112\001\001\000\002\001" +
    "\001\000\020\051\146\052\103\053\102\054\101\055\075" +
    "\056\076\061\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\052\145\053\102\054\101\055\075\056\076" +
    "\061\112\001\001\000\004\060\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\046\154" +
    "\047\106\050\105\051\104\052\103\053\102\054\101\055" +
    "\075\056\076\061\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\053\030\161\031\057" +
    "\032\067\034\051\035\056\036\060\037\064\040\063\041" +
    "\046\042\062\045\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\164\001\001\000\004\033\165\001" +
    "\001\000\002\001\001\000\004\003\167\001\001\000\002" +
    "\001\001\000\004\003\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\174\043\175\044\176\046\107" +
    "\047\106\050\105\051\104\052\103\053\102\054\101\055" +
    "\075\056\076\061\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\200\046\107\047" +
    "\106\050\105\051\104\052\103\053\102\054\101\055\075" +
    "\056\076\061\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\011\210\012" +
    "\027\013\026\014\010\015\016\023\212\024\213\025\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\210\012\027\013\026" +
    "\014\010\015\016\025\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\226\011\031\012\027\013\026\014\010" +
    "\015\016\016\227\017\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\232\011\031" +
    "\012\027\013\026\014\010\015\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LAP declaraciones instrucciones LCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloque",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= lista_declaraciones CIERREDECLARACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones ::= lista_declaraciones PUNCOMA declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= decvar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= dectipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= decproc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decvar ::= tipo0 IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("decvar",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo0 ::= tipo0 CAP ENT CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo0",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo0 ::= tipo1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo0",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo1 ::= POTENCIA tipo1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo1",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo1 ::= tipo2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo1",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo2 ::= tipo_basico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo2 ::= registro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo2 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_basico ::= PR_ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_basico ::= PR_REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_basico ::= PR_BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_basico ::= PR_STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // registro ::= STRUCT LAP campos LCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("registro",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // campos ::= l_campos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campos",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // l_campos ::= l_campos COMA decvar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("l_campos",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // l_campos ::= decvar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("l_campos",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dectipo ::= TYPE tipo0 IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("dectipo",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decproc ::= cabeza bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("decproc",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cabeza ::= PROC IDEN PAP parametros PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("cabeza",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros ::= lista_parametros 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_parametros ::= lista_parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametro ::= tipo0 IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametro",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametro ::= tipo0 AMPERSAND IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametro",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instrucciones ::= lista_instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instrucciones ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_instrucciones ::= lista_instrucciones PUNCOMA instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= instr_eval 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= instr_cond 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= instr_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= instr_lectura 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= instr_escritura 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= instr_nl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= instr_reserv_mem 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= instr_libera_mem 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= instr_invproc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion ::= instr_compu 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instr_eval ::= EVALUA expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_eval",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instr_cond ::= IF expresion bloque instr_else 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_cond",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instr_else ::= ELSE bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_else",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instr_else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_else",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instr_while ::= WHILE expresion bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_while",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instr_lectura ::= READ expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_lectura",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instr_escritura ::= WRITE expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_escritura",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instr_nl ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_nl",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instr_reserv_mem ::= NEW expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_reserv_mem",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instr_libera_mem ::= DELETE expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_libera_mem",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instr_invproc ::= CALL IDEN PAP param_reales PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_invproc",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // param_reales ::= lista_param_reales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("param_reales",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // param_reales ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("param_reales",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_param_reales ::= lista_param_reales COMA expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_reales",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lista_param_reales ::= expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_reales",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instr_compu ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instr_compu",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E0 ::= E1 ASIG E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E1 ::= E1 OP1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E2 ::= E2 MAS E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E2 ::= E3 MENOS E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E3 ::= E4 AND E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E3 ::= E4 OR E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E4 ::= E4 OP4 E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E5 ::= OP5 E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E6 ::= E6 OP6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E7 ::= EXPR_B 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E7 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPR_B ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR_B",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPR_B ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR_B",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPR_B ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR_B",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPR_B ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR_B",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPR_B ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR_B",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPR_B ::= CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR_B",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPR_B ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR_B",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP1 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP1 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP1 ::= MAYORIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP1 ::= MENORIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP1 ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP1 ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP4 ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP4 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP4 ::= MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP5 ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP5 ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP6 ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP6 ::= PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP6 ::= CAP E0 CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

