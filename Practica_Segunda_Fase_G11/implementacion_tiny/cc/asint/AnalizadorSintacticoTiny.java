/* AnalizadorSintacticoTiny.java */
/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTiny.java */
package cc.asint;

public class AnalizadorSintacticoTiny implements AnalizadorSintacticoTinyConstants {
    protected void newToken(Token t) {}

  final public void programa() throws ParseException {
    trace_call("programa");
    try {

      bloque();
      jj_consume_token(0);
    } finally {
      trace_return("programa");
    }
}

  final public void bloque() throws ParseException {
    trace_call("bloque");
    try {

      jj_consume_token(34);
      declaraciones();
      instrucciones();
      jj_consume_token(35);
    } finally {
      trace_return("bloque");
    }
}

  final public void declaraciones() throws ParseException {
    trace_call("declaraciones");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENT:
      case REAL:
      case BOOL:
      case PROC:
      case STRUCT:
      case STRING:
      case TYPE:
      case iden:
      case 40:{
        lista_declaraciones();
        jj_consume_token(36);
        break;
        }
      default:
        jj_la1[0] = jj_gen;

      }
    } finally {
      trace_return("declaraciones");
    }
}

  final public void lista_declaraciones() throws ParseException {
    trace_call("lista_declaraciones");
    try {

      declaracion();
      rec_declaracion();
    } finally {
      trace_return("lista_declaraciones");
    }
}

  final public void rec_declaracion() throws ParseException {
    trace_call("rec_declaracion");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 37:{
        jj_consume_token(37);
        declaracion();
        rec_declaracion();
        break;
        }
      default:
        jj_la1[1] = jj_gen;

      }
    } finally {
      trace_return("rec_declaracion");
    }
}

  final public void declaracion() throws ParseException {
    trace_call("declaracion");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENT:
      case REAL:
      case BOOL:
      case STRUCT:
      case STRING:
      case iden:
      case 40:{
        decvar();
        break;
        }
      case TYPE:{
        dectipo();
        break;
        }
      case PROC:{
        decproc();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("declaracion");
    }
}

  final public void decvar() throws ParseException {
    trace_call("decvar");
    try {

      tipo0();
      jj_consume_token(iden);
    } finally {
      trace_return("decvar");
    }
}

  final public void tipo0() throws ParseException {
    trace_call("tipo0");
    try {

      tipo1();
      rec_tipo0();
    } finally {
      trace_return("tipo0");
    }
}

  final public void rec_tipo0() throws ParseException {
    trace_call("rec_tipo0");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 38:{
        jj_consume_token(38);
        jj_consume_token(lit_ent);
        jj_consume_token(39);
        rec_tipo0();
        break;
        }
      default:
        jj_la1[3] = jj_gen;

      }
    } finally {
      trace_return("rec_tipo0");
    }
}

  final public void tipo1() throws ParseException {
    trace_call("tipo1");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 40:{
        jj_consume_token(40);
        tipo1();
        break;
        }
      case ENT:
      case REAL:
      case BOOL:
      case STRUCT:
      case STRING:
      case iden:{
        tipo2();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("tipo1");
    }
}

  final public void tipo2() throws ParseException {
    trace_call("tipo2");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENT:
      case REAL:
      case BOOL:
      case STRING:{
        tipo_basico();
        break;
        }
      case STRUCT:{
        registro();
        break;
        }
      case iden:{
        jj_consume_token(iden);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("tipo2");
    }
}

  final public void tipo_basico() throws ParseException {
    trace_call("tipo_basico");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENT:{
        jj_consume_token(ENT);
        break;
        }
      case REAL:{
        jj_consume_token(REAL);
        break;
        }
      case BOOL:{
        jj_consume_token(BOOL);
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("tipo_basico");
    }
}

  final public void registro() throws ParseException {
    trace_call("registro");
    try {

      jj_consume_token(STRUCT);
      jj_consume_token(34);
      campos();
      jj_consume_token(35);
    } finally {
      trace_return("registro");
    }
}

  final public void campos() throws ParseException {
    trace_call("campos");
    try {

      l_campos();
    } finally {
      trace_return("campos");
    }
}

  final public void l_campos() throws ParseException {
    trace_call("l_campos");
    try {

      decvar();
      rec_l_campos();
    } finally {
      trace_return("l_campos");
    }
}

  final public void rec_l_campos() throws ParseException {
    trace_call("rec_l_campos");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 41:{
        jj_consume_token(41);
        decvar();
        rec_l_campos();
        break;
        }
      default:
        jj_la1[7] = jj_gen;

      }
    } finally {
      trace_return("rec_l_campos");
    }
}

  final public void dectipo() throws ParseException {
    trace_call("dectipo");
    try {

      jj_consume_token(TYPE);
      tipo0();
      jj_consume_token(iden);
    } finally {
      trace_return("dectipo");
    }
}

  final public void decproc() throws ParseException {
    trace_call("decproc");
    try {

      cabeza();
      bloque();
    } finally {
      trace_return("decproc");
    }
}

  final public void cabeza() throws ParseException {
    trace_call("cabeza");
    try {

      jj_consume_token(PROC);
      jj_consume_token(iden);
      jj_consume_token(42);
      parametros();
      jj_consume_token(43);
    } finally {
      trace_return("cabeza");
    }
}

  final public void parametros() throws ParseException {
    trace_call("parametros");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENT:
      case REAL:
      case BOOL:
      case STRUCT:
      case STRING:
      case iden:
      case 40:{
        lista_parametros();
        break;
        }
      default:
        jj_la1[8] = jj_gen;

      }
    } finally {
      trace_return("parametros");
    }
}

  final public void lista_parametros() throws ParseException {
    trace_call("lista_parametros");
    try {

      parametro();
      rec_parametros();
    } finally {
      trace_return("lista_parametros");
    }
}

  final public void rec_parametros() throws ParseException {
    trace_call("rec_parametros");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 41:{
        jj_consume_token(41);
        parametro();
        rec_parametros();
        break;
        }
      default:
        jj_la1[9] = jj_gen;

      }
    } finally {
      trace_return("rec_parametros");
    }
}

  final public void parametro() throws ParseException {
    trace_call("parametro");
    try {

      tipo0();
      resto_parametro();
    } finally {
      trace_return("parametro");
    }
}

  final public void resto_parametro() throws ParseException {
    trace_call("resto_parametro");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case iden:{
        jj_consume_token(iden);
        break;
        }
      case 44:{
        jj_consume_token(44);
        jj_consume_token(iden);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("resto_parametro");
    }
}

  final public void instrucciones() throws ParseException {
    trace_call("instrucciones");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case NEW:
      case DELETE:
      case READ:
      case WRITE:
      case NL:
      case CALL:
      case 34:
      case 45:{
        lista_instrucciones();
        break;
        }
      default:
        jj_la1[11] = jj_gen;

      }
    } finally {
      trace_return("instrucciones");
    }
}

  final public void lista_instrucciones() throws ParseException {
    trace_call("lista_instrucciones");
    try {

      instruccion();
      rec_instrucciones();
    } finally {
      trace_return("lista_instrucciones");
    }
}

  final public void rec_instrucciones() throws ParseException {
    trace_call("rec_instrucciones");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 37:{
        jj_consume_token(37);
        instruccion();
        rec_instrucciones();
        break;
        }
      default:
        jj_la1[12] = jj_gen;

      }
    } finally {
      trace_return("rec_instrucciones");
    }
}

  final public void instruccion() throws ParseException {
    trace_call("instruccion");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 45:{
        instr_eval();
        break;
        }
      case IF:{
        instr_cond();
        break;
        }
      case WHILE:{
        instr_while();
        break;
        }
      case READ:{
        instr_lectura();
        break;
        }
      case WRITE:{
        instr_escritura();
        break;
        }
      case NL:{
        instr_nl();
        break;
        }
      case NEW:{
        instr_reserv_mem();
        break;
        }
      case DELETE:{
        instr_libera_mem();
        break;
        }
      case CALL:{
        instr_invproc();
        break;
        }
      case 34:{
        instr_compu();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("instruccion");
    }
}

  final public void instr_eval() throws ParseException {
    trace_call("instr_eval");
    try {

      jj_consume_token(45);
      expresion();
    } finally {
      trace_return("instr_eval");
    }
}

  final public void instr_cond() throws ParseException {
    trace_call("instr_cond");
    try {

      jj_consume_token(IF);
      expresion();
      bloque();
      instr_else();
    } finally {
      trace_return("instr_cond");
    }
}

  final public void instr_else() throws ParseException {
    trace_call("instr_else");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        bloque();
        break;
        }
      default:
        jj_la1[14] = jj_gen;

      }
    } finally {
      trace_return("instr_else");
    }
}

  final public void instr_while() throws ParseException {
    trace_call("instr_while");
    try {

      jj_consume_token(WHILE);
      expresion();
      bloque();
    } finally {
      trace_return("instr_while");
    }
}

  final public void instr_lectura() throws ParseException {
    trace_call("instr_lectura");
    try {

      jj_consume_token(READ);
      expresion();
    } finally {
      trace_return("instr_lectura");
    }
}

  final public void instr_escritura() throws ParseException {
    trace_call("instr_escritura");
    try {

      jj_consume_token(WRITE);
      expresion();
    } finally {
      trace_return("instr_escritura");
    }
}

  final public void instr_nl() throws ParseException {
    trace_call("instr_nl");
    try {

      jj_consume_token(NL);
    } finally {
      trace_return("instr_nl");
    }
}

  final public void instr_reserv_mem() throws ParseException {
    trace_call("instr_reserv_mem");
    try {

      jj_consume_token(NEW);
      expresion();
    } finally {
      trace_return("instr_reserv_mem");
    }
}

  final public void instr_libera_mem() throws ParseException {
    trace_call("instr_libera_mem");
    try {

      jj_consume_token(DELETE);
      expresion();
    } finally {
      trace_return("instr_libera_mem");
    }
}

  final public void instr_invproc() throws ParseException {
    trace_call("instr_invproc");
    try {

      jj_consume_token(CALL);
      jj_consume_token(iden);
      jj_consume_token(42);
      param_reales();
      jj_consume_token(43);
    } finally {
      trace_return("instr_invproc");
    }
}

  final public void instr_compu() throws ParseException {
    trace_call("instr_compu");
    try {

      bloque();
    } finally {
      trace_return("instr_compu");
    }
}

  final public void param_reales() throws ParseException {
    trace_call("param_reales");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case NOT:
      case NULL:
      case iden:
      case lit_ent:
      case lit_real:
      case cadena:
      case 42:
      case 47:{
        lista_param_reales();
        break;
        }
      default:
        jj_la1[15] = jj_gen;

      }
    } finally {
      trace_return("param_reales");
    }
}

  final public void lista_param_reales() throws ParseException {
    trace_call("lista_param_reales");
    try {

      expresion();
      re_pareal();
    } finally {
      trace_return("lista_param_reales");
    }
}

  final public void re_pareal() throws ParseException {
    trace_call("re_pareal");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 41:{
        jj_consume_token(41);
        expresion();
        re_pareal();
        break;
        }
      default:
        jj_la1[16] = jj_gen;

      }
    } finally {
      trace_return("re_pareal");
    }
}

  final public void expresion() throws ParseException {
    trace_call("expresion");
    try {

      e0();
    } finally {
      trace_return("expresion");
    }
}

  final public void e0() throws ParseException {
    trace_call("e0");
    try {

      e1();
      re0();
    } finally {
      trace_return("e0");
    }
}

  final public void re0() throws ParseException {
    trace_call("re0");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 46:{
        jj_consume_token(46);
        e0();
        break;
        }
      default:
        jj_la1[17] = jj_gen;

      }
    } finally {
      trace_return("re0");
    }
}

  final public void e1() throws ParseException {
    trace_call("e1");
    try {

      e2();
      re1();
    } finally {
      trace_return("e1");
    }
}

  final public void re1() throws ParseException {
    trace_call("re1");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:{
        op1();
        e2();
        re1();
        break;
        }
      default:
        jj_la1[18] = jj_gen;

      }
    } finally {
      trace_return("re1");
    }
}

  final public void e2() throws ParseException {
    trace_call("e2");
    try {

      e3();
      re2();
      re22();
    } finally {
      trace_return("e2");
    }
}

  final public void re2() throws ParseException {
    trace_call("re2");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 47:{
        jj_consume_token(47);
        e3();
        break;
        }
      default:
        jj_la1[19] = jj_gen;

      }
    } finally {
      trace_return("re2");
    }
}

  final public void re22() throws ParseException {
    trace_call("re22");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 48:{
        jj_consume_token(48);
        e3();
        re22();
        break;
        }
      default:
        jj_la1[20] = jj_gen;

      }
    } finally {
      trace_return("re22");
    }
}

  final public void e3() throws ParseException {
    trace_call("e3");
    try {

      e4();
      re3();
    } finally {
      trace_return("e3");
    }
}

  final public void re3() throws ParseException {
    trace_call("re3");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        jj_consume_token(AND);
        e3();
        break;
        }
      case OR:{
        jj_consume_token(OR);
        e4();
        break;
        }
      default:
        jj_la1[21] = jj_gen;

      }
    } finally {
      trace_return("re3");
    }
}

  final public void e4() throws ParseException {
    trace_call("e4");
    try {

      e5();
      re4();
    } finally {
      trace_return("e4");
    }
}

  final public void re4() throws ParseException {
    trace_call("re4");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 55:
      case 56:
      case 57:{
        op4();
        e5();
        re4();
        break;
        }
      default:
        jj_la1[22] = jj_gen;

      }
    } finally {
      trace_return("re4");
    }
}

  final public void e5() throws ParseException {
    trace_call("e5");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:
      case 47:{
        op5();
        e5();
        break;
        }
      case TRUE:
      case FALSE:
      case NULL:
      case iden:
      case lit_ent:
      case lit_real:
      case cadena:
      case 42:{
        e6();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("e5");
    }
}

  final public void e6() throws ParseException {
    trace_call("e6");
    try {

      e7();
      re6();
    } finally {
      trace_return("e6");
    }
}

  final public void re6() throws ParseException {
    trace_call("re6");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 38:
      case 40:
      case 58:{
        op6();
        re6();
        break;
        }
      default:
        jj_la1[24] = jj_gen;

      }
    } finally {
      trace_return("re6");
    }
}

  final public void e7() throws ParseException {
    trace_call("e7");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case NULL:
      case iden:
      case lit_ent:
      case lit_real:
      case cadena:{
        expr_b();
        break;
        }
      case 42:{
        jj_consume_token(42);
        e0();
        jj_consume_token(43);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("e7");
    }
}

  final public void expr_b() throws ParseException {
    trace_call("expr_b");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:{
        jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
        break;
        }
      case lit_ent:{
        jj_consume_token(lit_ent);
        break;
        }
      case lit_real:{
        jj_consume_token(lit_real);
        break;
        }
      case iden:{
        jj_consume_token(iden);
        break;
        }
      case cadena:{
        jj_consume_token(cadena);
        break;
        }
      case NULL:{
        jj_consume_token(NULL);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("expr_b");
    }
}

  final public void op1() throws ParseException {
    trace_call("op1");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:{
        jj_consume_token(49);
        break;
        }
      case 50:{
        jj_consume_token(50);
        break;
        }
      case 51:{
        jj_consume_token(51);
        break;
        }
      case 52:{
        jj_consume_token(52);
        break;
        }
      case 53:{
        jj_consume_token(53);
        break;
        }
      case 54:{
        jj_consume_token(54);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op1");
    }
}

  final public void op4() throws ParseException {
    trace_call("op4");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 55:{
        jj_consume_token(55);
        break;
        }
      case 56:{
        jj_consume_token(56);
        break;
        }
      case 57:{
        jj_consume_token(57);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op4");
    }
}

  final public void op5() throws ParseException {
    trace_call("op5");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 47:{
        jj_consume_token(47);
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op5");
    }
}

  final public void op6() throws ParseException {
    trace_call("op6");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 40:{
        jj_consume_token(40);
        break;
        }
      case 58:{
        jj_consume_token(58);
        jj_consume_token(iden);
        break;
        }
      case 38:{
        jj_consume_token(38);
        e0();
        jj_consume_token(39);
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op6");
    }
}

  /** Generated Token Manager. */
  public AnalizadorSintacticoTinyTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x50620700,0x0,0x50620700,0x0,0x40600700,0x40600700,0x400700,0x0,0x40600700,0x0,0x40000000,0x2f940000,0x0,0x2f940000,0x80000,0xc0019800,0x0,0x0,0x0,0x0,0x0,0x6000,0x0,0xc0019800,0x0,0xc0011800,0xc0011800,0x0,0x0,0x8000,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x100,0x20,0x100,0x40,0x100,0x0,0x0,0x200,0x100,0x200,0x1000,0x2004,0x20,0x2004,0x0,0x8403,0x200,0x4000,0x7e0000,0x8000,0x10000,0x0,0x3800000,0x8403,0x4000140,0x403,0x3,0x7e0000,0x3800000,0x8000,0x4000140,};
	}

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public AnalizadorSintacticoTiny(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorSintacticoTiny(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new AnalizadorSintacticoTinyTokenManager(this, jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(this,jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalizadorSintacticoTiny(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new AnalizadorSintacticoTinyTokenManager(this, jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new AnalizadorSintacticoTinyTokenManager(this, jj_input_stream);
	}

	 token_source.ReInit(this,jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorSintacticoTiny(AnalizadorSintacticoTinyTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorSintacticoTinyTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[59];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 31; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 59; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  private int trace_indent = 0;
/** Enable tracing. */
  final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
	 trace_enabled = false;
  }

  protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

}
